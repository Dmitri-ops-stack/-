from aiogram import Router, F
from aiogram.filters import Command
f
    crud = CRUD(session)
    now = datetime.now(tz=config.TIMEZONE)
    time_window_start = now - timedelta(minutes=15)
    time_window_end = now + timedelta(minutes=15)
    appointments = await crud.get_appointments_by_specialist(specialist_id)
    for app in appointments:
        if (app.status == AppointmentStatus.APPROVED and
                app.scheduled_time and
                time_window_start <= app.scheduled_time.astimezone(config.TIMEZONE) <= time_window_end):
            return True, app.id
    return False, None

@router.message(Command("specialist"))
async def cmd_specialist(message: Message, state: FSMContext, session: AsyncSession, bot):
    """Handle the /specialist command to display the specialist's keyboard."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = awa

@router.message(F.text == "‚úÖ –ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É")
async def close_appointment(message: Message, state: FSMContext, session: AsyncSession, bot):
    """Handle the '–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É' button to mark the appointment as COMPLETED, update rank, and request client rating."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data = await state.get_data()
    appointment_id = data.get("appointment_id")
    if not appointment_id:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
        return
    appointment = await crud.get_appointment(appointment_id)
    if not appointment or appointment.status != AppointmentStatus.APPROVED:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
        await state.clear()
        return
    appoint
        await message.answer(response, parse_mode="MarkdownV2", reply_markup=markup)
        await state.set_state(SpecialistStates.rating_client)
        await state.update_data(client_id=client_id, appointment_id=appointment_id)
        lating}")
    except ValueError as e:
        logger.error(f"Rating error for client {client_id}: {str(e)}")
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {str(e)}")
        await session.rollback()
    await callback.answer()
    await state.clear()

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É")
async def cancel_appointment(message: Message, state: FSMContext, session: AsyncSession):
    """Handle the '–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É' button to prompt for a cancellation reason."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    data = await state.get_data()
    appointment_id = data.get("appointment_id")
    if not
    data = await state.get_data()
    appointment_id 
        )
        client_message = escape_markdown_v2(
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{appointment.id}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
        await bot.send_message(config.ADMIN_ID, admin_message, parse_mode="MarkdownV2")
        await bot.send_message(appointment.client.user.telegram_id, client_message, parse_mode="MarkdownV2")
        has_appointments, new_appointment_id = await has_active_appointment(session, specialist.id)
        keyboard = get_specialist_keyboard(has_appointments=has_appointments)
        await message.answer(
            f"–ó–∞—è–≤–∫–∞ #{appointment.id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=keyboard
   
            app.status == AppointmentStatus.APPROVED and
            app.scheduled_time and
            time_window_start <= app.scheduled_time.astimezone(config.TIMEZONE) <= time_window_end
        )
        response += (
            f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {app.client.full_name}\n"
            f"–í—Ä–µ–º—è: {scheduled_time}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {app.reason}\n"
        )
        if is_active and not app.specialist_ready:
            response += f"<b>–°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å)</b>\n\n"
        else:
            response += f"–°—Ç–∞—Ç—É—Å: {app.status.value}\n\n"
    total_page
        for app in appointments[page * 5:(page + 1) * 5]:
            is_active = (
                app.status == AppointmentStatus.APPROVED and
                app.scheduled_time and
                datetime.now(tz=config.TIMEZONE) - timedelta(minutes=15) <= app.scheduled_time.astimezone(config.TIMEZONE) <= datetime.now(tz=config.TIMEZONE) + timedelta(minutes=15)
            )
            if is_active and not app.specialist_ready:
                pagination_keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=f"–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (#{app.id})", callback_data=f"specialist_ready_{app.id}")
                ])
        pagination_keyboard.inline_keyboard.extend(get_schedule_pagination_keyboard(page, total_pages).inline_keyboard)
        await message.answer(response, reply_markup=keyboard)
        if pagination_keyboard.inline_keyboard:
            await message.answer("–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=pagination_keyboard)
        await state.update_data(schedule_page=page, total_pages=total_pages, appointments=[app.id for app in appointments])
        logger.info(f"S
    await session.commit()
    scheduled_time = format_appointment_date(appointment.scheduled_time.astimezone(config.TIMEZONE))
    client_message = escape_markdown_v2(
        f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist.full_name} –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –ø–æ –∑–∞—è–≤–∫–µ #{appointment.id} (–≤—Ä–µ–º—è: {scheduled_time})."
    )
    specialist_message = escape_markdown_v2(
        f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ –∑–∞—è–≤–∫–µ #{appointment.id} (–≤—Ä–µ–º—è: {scheduled_time})."
    )
    try:
        await bot.send_message(
            appointment.client.user.telegram_id,
            client_messag–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.",
            parse_mode="MarkdownV2"
        )
        await callback.answer()

@router.callback_query(F.data.startswith("schedule_next"))
async def schedule_next(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle the 'Next' button to show the next page of appointments."""
    telegram_id = callback.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:
        await callback.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return
    data = await state.get_data()
    page = data.get("schedule_page", 0)
    total_pages = data.get("total_pages", 1)
    appointment_ids = data.get("appointments", [])
    if page + 1 >= total_pages:ine_keyboard)
        await callback.message.edit_text(response, reply_markup=pagination_keyboard)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        await state.update_data(schedule_page=page, total_pages=total_pages)
        logger.info(f"Specialist {telegram_id} viewed schedule (page {page + 1}/{total_pages})")
    except Exception as e:
        logger.error(f"Failed to fetch next schedule page for specialist {telegram_id}: {e}", exc_info=True)
        await session.rollback()
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

@router.callback_query(F.data.startswith("schedule_prev"))
async def schedule_prev(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Handle the 'Previous' button to show the previous page of appointments."""
    telegram_id = callback.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:ist.)
    await callback.answer()

@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã")
async def show_reports(message: Message, session: AsyncSession):
    """Display options for selecting the report period."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
            f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞ ({next_rank}): {progress} –∑–∞—è–≤–æ–∫"
        )
        has_appointments, _ = await has_active_appointment(session, specialist.id)
        keyboard = get_specialist_keyboard(has_appointments=has_appointments)
        await message.answer(response, parse_mode="MarkdownV2", reply_markup=keyboard)
        logger.info(f"Specialist {telegram_id} viewed rank")
    except Exception as e:
        start_date = now - timedelta(days=30)
        period_label = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
    else:  # 3months
        start_date = now - timedelta(days=90)
        period_label = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"
    try:
        appointments = await crud.get_appointments_by_specialist(specialist.id)
        completed_count = 0
        canceled_count = 0
        for app in appointments:
            if app.scheduled_time and start_date <= app.scheduled_time.astimezone(config.TIMEZONE) <= now:
                if app.status == AppointmentStatus.COMPLETED:
                    completed_count += 1
                elif app.status == AppointmentStatus.CANCELLED:
                    canceled_count += 1
        response = escape_markdown_v2
    """Start the process of changing the specialist's availability status."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    specialist = await crud.get_specialist(str(telegram_id))
    if not specialist:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:\n1. –î–æ—Å—Ç—É–ø–µ–Ω\n2. –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        reply_markup=None
    )
    await state.set_state(SpecialistStates.change_availability)
    logger.info(f"Specialist {telegram_id} started changing availability")

    """Handle inv
    appointments = await crud.get_appointments_by_specialist(specialist.id)
    if not appointments:
        await message.
        logger.info(f"Specialist {telegram_id} submitted report: {report_text[:50]}...")
    except Exception as e:
        logger.error(f"Failed to save or notify admin for report by specialist {telegram_id}: {e}", exc_info=True)
        await session.rollback()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()
