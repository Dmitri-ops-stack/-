from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    )
    for spec in specialists:
        response += (
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {spec.full_name}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞—è–≤–æ–∫: {spec.completed_appointments}\n"
            f"–†–∞–Ω–≥: {spec.rank}\n\n"
        )
    await message.answer(response, reply_markup=get_admin_keyboard())

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∏")
async def show_appointments(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    appointments = await crud.get_future_appointments()
    if not appointments:
        await message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    APPOINTMENTS_PER_PAGE = 5
    page = 0
            if app.status != AppointmentStatus.CANCELED:
                buttons.append(
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_appointment_{app.id}")]
                )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"appointments_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"appointments_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_appointments_page(page)
    await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.view_appointments)
    await state.update_data(total_pages=total_pages, appointments=appointments)

@router.callback_query(F.data.startswith("appointments_page_"), AdminStates.view_appointments)
async def paginate_appointments(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    page = int(callback.data.split("_")[-1])
    data = await state.get_data()
    appointments = data.get("appointments", [])
    total_pages = data.get("total_pages", 1)
    APPOINTMENTS_PER_PAGE = 5

    def get_appointments_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * APPOINTMENTS_PER_PAGE
        end_idx = min(start_idx + APPOINTMENTS_PER_PAGE, len(appointments))
        response = f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for app in appointments[start_idx:end_idx]:
            status = app.status.value
            date = app.proposed_date.astimezone(config.TIMEZONE).strftime("%d.%m.%Y")
            scheduled_time = app.scheduled_time.astimezone(config.TIMEZONE).strftime(
                "%H:%M") if app.scheduled_time else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            specialist = app.specialist.full_name if app.specialist else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
            reason = app.reason[:100] + "..." if len(app.reason) > 100 else app.reason
            response += (
                f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {app.client.full_name}\n"
                f"–î–∞—Ç–∞: {date}\n"
                f"–í—Ä–µ–º—è: {scheduled_time}\n"
                f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            )
            if app.status != AppointmentStatus.CANCELED:
                buttons.append(
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_appointment_{app.id}")]
                )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"appointments_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"appointments_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        butto
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    response = "<b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n\n"
    for entry in blacklist:
        response += (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {entry.user_id}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {entry.reason}\n"
            f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ: {entry.blocked_until.astimezone(config.TIMEZONE).strftime('%d.%m.%Y %H:%M')}\n\n"
        )
    await message.answer(response, reply_markup=get_admin_keyboard())

@router.message(F.text == "üî® —Ä–∞–±–æ—Ç–∞ —Å –ß–°")
async def manage_blacklist(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    blacklist = await crud.get_blacklist()
    if not blacklist:
        await message.answer("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.", reply_markup=get_admin_keyboard())
        return
    inline_buttons = [
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ß–°", callback_data="add_to_blacklist")]
    ] + [
        [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –∏–∑ –ß–°: {entry.user_id}",
                              callback_data=f"remove_from_blacklist_{entry.user_id}")]
        for entry in blacklist
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    await state.set_state(AdminStates.blacklist_management)

@router.callback_query(F.data == "add_to_blacklist", AdminStates.blacklist_management)
async def add_to_blacklist(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°:")
    await state.set_state(AdminStates.adding_to_blacklist)

@router.message(AdminStates.adding_to_blacklist)
async def process_a
    await state.clear()

@router.callback_query(F.data.startswith("remove_from_blacklist_"), AdminStates.blacklist_management)
async def remove_from_blacklist(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    telegram_id = callback.data.split("_")[-1]
    crud = CRUD(session)
    blacklist_entry = await crud.is_blacklisted(telegram_id)
    if not blacklist_entry:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ß–°.", reply_markup=None)
        await state.clear()
        return
    await session.de
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data="add_specialist")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞", callback_data="remove_specialist")]
    ])
    await message.answer(response, reply_markup=keyboard)

@router.callback_query(F.data == "add_specialist")
async def add_specialist(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    crud = CRUD(session)
    clients = await crud.get_all_clients()
    if not clients:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.", reply_markup=None)
        await state.clear()
        return
    CLIENTS_PER_PAGE = 10
    page = 0
    total_pages = (len(clients) + CLIENTS_PER_PAGE - 1) // CLIENTS_PER_PAGE

    def get_client_keyboard(page: int) -> InlineKeyboardMarkup:
        start_idx = page * CLIENTS_PER_PAGE
        end_idx = min(start_idx + CLIENTS_PER_PAGE, len(clients))
        buttons = [
            [InlineKeyboardButton(
                text=f"{client.full_name} (ID: {client.user_id})",
                callback_data=f"select_client_{client.user_id}"
            )] for client in clients[start_idx:end_idx]
        ]
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
        if nav_buttons:session: AsyncSession):
    page = int(callback.data.split("_")[1])
    crud = CRUD(session)
    clients = await crud.get_all_clients()
    data = await state.get_data()
    total_pages = data.get("total_pages", 1)
    CLIENTS_PER_PAGE = 10

    def get_client_keyboard(page: int) -> InlineKeyboardMarkup:
        start_idx = page * CLIENTS_PER_PAGE
        end_idx = min(start_idx + CLIENTS_PER_PAGE, len(clients))
        buttons = [
            [InlineKeyboardButton(
                text=f"{client.full_name} (ID: {client.user_id})",
                callback_data=f"select_client_{client.user_id}"
            )] for client in clients[start_idx:end_idx]
        ]
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_add_specialist")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    keyboard = get_client_keyboard(page)
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):",
        reply_markup=keyboard
    )

    if user.role != Role.CLIENT:
        await callback.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.client.full_name} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º (—É–∂–µ {user.role.value}).",
            reply_markup=None
        )
        await state.clear()
        return
    await state.update_data(telegram_id=telegram_id, full_name=user.client.full_name)
    await callback.message.edit_text(
        f"–ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {user.client.full_name} (ID: {telegram_id})\n"
        f"–í–≤–µ–¥–∏—Ç–µ username (–Ω–∞–ø—Ä–∏–º–µ—Ä: '@ivan') –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ username", callback_data=f"no_username_{telegram_id}")
            ]
        ])
    )
    await state.set_state(AdminStates.adding_specialist_details)

@router.message(AdminStates.adding_specialist_details)
async def process_add_specialist_details(message: Message, state: FSMContext, session: AsyncSession):
    username = message.text.strip() if message.text else ""
    if username and not username.startswith("@"):
        await message.answer("Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '@' (–Ω–∞–ø—Ä–∏–º–µ—Ä: '@ivan'). –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return
    data = await state.get
    data = await state.get_data()
    full_name = data["full_name"]
    crud = CRUD(session)
    user = await crud.get_user(telegram_id)
    if not user:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
    client = await crud.get_client(telegram_id)
    if not client:
        await callback.message.edit_text("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
    user.role = Role.SPECIALIST
    await session.merge(user)
    specialist = Specialist(
        user_id=telegram_id,
        full_name=full_name,
        username=f"@{telegram_id}",
        phone=client.phone,
        is_available=True
    )
    try:
        await crud.create_specialist(specialist)
        await callback.message.edit_text(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {full_name} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=None)
    except Exception as e:
        logger.error(f"Failed to create specialist {telegram_id}: {e}")
        await session.rollback()
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None)
    finally:
        await state.clear()

@router.callback_query(F.data == "remove_specialist")
async def remove_specialist(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminStates.removing_specialist)

@router.message(AdminStates.removing_specialist)
async def process_remove_specialist(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.text.strip()
    crud = CRUD(session)
    specialist = await crud.get_specialist(telegram_id)
    if not specialist:
        await message.answer("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    user = await crud.get_user(telegram_id)
    if user:
        await session.delete(user)
    await session.delete(specialist)
    await session.commit()
    await message.answer(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {telegram_id} —É–¥–∞–ª—ë–Ω.", reply_markup=get_admin_keyboard())
    await state.clear()

@router.message(F.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
async def export_data(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1 –Ω–µ–¥–µ–ª—è", callback_data="export_1week")],
        [InlineKeyboardButton(text="2 –Ω–µ–¥–µ–ª–∏", callback_data="export_2weeks")],
        [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="export_1month")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_export")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:", reply_markup=keyboard)
    await state.set_state(AdminStates.export_data)

@router.callback_query(F.data.startswith("export_"), AdminStates.export_data)
async def process_export(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    period = callback.data.split("_")[1]
    try:
        csv_content = await export_appointments_to_csv(session, period)
        filename = f"appointments_{period}_{datetime.now(tz=config.TIMEZONE).strftime('%Y%m%d_%H%M%S')}.csv"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(csv_content)
        await callback.message.bot.send_document(
            chat_id=callback.message.chat.id,
            document=FSInputFile(filename),
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –∑–∞ {period.replace('1week', '1 –Ω–µ–¥–µ–ª—é').replace('2weeks', '2 –Ω–µ–¥–µ–ª–∏').replace('1month', '1 –º–µ—Å—è—Ü')}"
        )
        os.remove(filename)
    except Exception as e:
        logger.error(f"Failed to export data: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None)
    await state.clear()

@router.callback_query(F.data == "cancel_export", AdminStates.export_data)
async def cancel_export(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=get_admin_keyboard())
    await state.clear()

@router.callback_query(F.data.startswith("confirm_"))
async def confirm_appointment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    appointment_id = int(callback.data.split("_")[1])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    specialists = await crud.get_available_specialists()
    if not specialists:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.", reply_markup=None)
        await state.clear()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{spec.full_name} (@{spec.username})",
                              callback_data=f"assign_{appointment_id}_{spec.user_id}")]
        for spec in specialists
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AdminStates.select_specialist)

@router.callback_query(F.data.startswith("assign_"), AdminStates.select_specialist)
async def assign_specialist(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    _, appointment_id, specialist_id = callback.data.split("_")
    appointment_id = int(appointment_id)
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    specialist = await crud.get_specialist(specialist_id)
    if not specialist:
        await callback.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
    try:
        await bot.send_message(specialist.user_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.")
    except TelegramBadRequest as e:
        logger.error(f"Cannot message specialist {specialist.user_id}: {e}")
        await callback.message.edit_text(
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist.full_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π).",
            reply_markup=None
        )
        await state.clear()
        return
    appointment.specialist_id = specialist.id
    await session.commit()
    appointments = await crud.get_appointments_by_specialist(specialist.id)
    keyboard = get_time_selection_keyboard(appointments, appointment.proposed_date)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
    await state.update_data(appointment_id=appointment_id)
    await state.set_state(AdminStates.select_time)

@router.callback_query(F.data.startswith("time_"), AdminStates.select_time)
async def select_time(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    time_str = callback.data.split("_")[1]
    data = await state.get_data()
    appointment_id = data["appointment_id"]
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    scheduled_time = datetime.strptime(
        f"{appointment.proposed_date.strftime('%Y-%m-%d')} {time_str}",
        "%Y-%m-%d %H:%M"
    ).replace(tzinfo=config.TIMEZONE)
    appointment.scheduled_time = scheduled_time
    appointment.status = AppointmentStatus.APPROVED
    await session.commit()
    try:
        await notify_client_approved(bot, appointment)
    except Exception as e:
        logger.error(f"Failed to notify client for appointment {appointment_id}: {e}")
        await bot.send_message(
            config.ADMIN_ID,
            escape_markdown_v2(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{appointment_id}."),
            parse_mode="MarkdownV2"
        )
    specialist = appointment.specialist
    scheduled_time_str = scheduled_time.astimezone(config.TIMEZONE).strftime("%d.%m.%Y %H:%M")
    client_link = f"https://t.me/{appointment.client.user_id}"
    client_contact = f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {client_link}"
    try:
        chat = await bot.get_chat(appointment.client.user_id)
        if chat.username:
            client_link = f"https://t.me/{chat.username}"
            client_contact = f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {client_link}"
        else:
            client_contact += f"\n(–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: https://t.me/{config.ADMIN_ID})"
    except TelegramBadRequest as e:
        logger.warning(
            f"Cannot get username for client {appointment.client.user_id} (appointment_id: {appointment_id}): {e}")
        client_contact += f"\n(–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: https://t.me/{config.ADMIN_ID})"
    try:
        text = (
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appointment.id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {scheduled_time_str}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {appointment.client.full_name}\n"
            f"{client_contact}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞: {appointment.client.phone}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {appointment.reason[:500] + '...' if len(appointment.reason) > 500 else appointment.reason}"
        )
        escaped_text = escape_markdown_v2(text)
        await bot.send_message(
            specialist.user_id,
            escaped_text,
            parse_mode="MarkdownV2"
        )
    except TelegramBadRequest as e:
        logger.error(f"Failed to notify specialist {specialist.user_id} for appointment {appointment_id}: {e}")
        await bot.send_message(
            config.ADMIN_ID,
            f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist.full_name} (ID: {specialist.user_id}) –æ –∑–∞—è–≤–∫–µ #{appointment.id}. –ü—Ä–∏—á–∏–Ω–∞: {e}"
        )
        specialist.is_available = False
        await session.commit()
    await callback.message.edit_text(f"–ó–∞—è–≤–∫–∞ #{appointment.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ {scheduled_time_str}.",
                                    reply_markup=None)
    await state.clear()

@router.callback_query(F.data.startswith("cancel_appointment_"))
async def cancel_appointment(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    appointment_id = int(callback.data.split("_")[2])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="abort_reject")]
        ])
    )
    await state.update_data(appointment_id=appointment_id)
    await state.set_state(AdminStates.reject_reason)

@router.message(AdminStates.reject_reason)
async def process_reject_reason(message: Message, state: FSMContext, session: AsyncSession, bot):
    reason = message.text.strip()
    if not reason:
        await message.answer("–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    appointment_id = data.get("appointment_id")
    if not appointment_id:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    crud = CRUD(session)
    try:
        appointment = await crud.get_appointment(appointment_id)
        if not appointment:
            await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_admin_keyboard())
            await state.clear()
            return
        if not appointment.client or not appointment.client.user:
            logger.error(f"Invalid appointment {appointment_id}: missing client or user relationship")
            await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_admin_keyboard())
            await state.clear()
            return
        logger.debug(f"Updating appointment {appointment_id}: status=CANCELED, reason={reason}")
        appointment.status = AppointmentStatus.CANCELED
        appointment.reject_reason = reason
        await session.commit()
        from services.notifications import notify_client_rejected
        try:
            await notify_client_rejected(bot, appointment, reason)
        except Exception as e:
            logger.warning(f"Failed to notify client {appointment.client.user.telegram_id} for appointment {appointment_id}: {e}")
            await bot.send_message(
                config.ADMIN_ID,
                escape_markdown_v2(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –∑–∞—è–≤–∫–µ #{appointment.id}."),
                parse_mode="MarkdownV2"
            )
        await message.answer(f"–ó–∞—è–≤–∫–∞ #{appointment.id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", reply_markup=get_admin_keyboard())
        logger.info(f"Admin {message.from_user.id} rejected appointment {appointment_id}: {reason}")
    except Exception as e:
        logger.error(f"Failed to reject appointment {appointment_id} by admin {message.from_user.id}: {e}", exc_info=True)
        await session.rollback()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_admin_keyboard())
    finally:
        await state.clear()

@router.callback_query(F.data.startswith("cancel_"))
async def reject_new_appointment(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    telegram_id = callback.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=None)
        await callback.answer()
        return
    try:
        appointment_id = int(callback.data.split("_")[1])
        appointment = await crud.get_appointment(appointment_id)
        if not appointment:
            await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
            await callback.answer()
            return
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ", callback_data="abort_reject")]
            ])
        )
        await state.update_data(appointment_id=appointment_id)
        await state.set_state(AdminStates.reject_reason)
        logger.info(f"Admin {telegram_id} initiated rejection for new appointment {appointment_id}")
        await callback.answer()
    except ValueError as e:
        logger.error(f"Invalid appointment_id in callback data: {callback.data}, error: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.", reply_markup=None)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error rejecting new appointment for admin {telegram_id}: {e}", exc_info=True)
        await session.rollback()
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=None)
        await callback.answer()

@router.callback_query(F.data == "abort_reject", AdminStates.reject_reason)
async def abort_reject(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await state.clear()

@router.message(F.text == "üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏")
async def show_assigned_appointments(message: Message, state: FSMContext, session: AsyncSession):
    """Show list of specialists to view their assigned appointments."""
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if not user or user.role != Role.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    specialists = await crud.get_all_specialists()
    if not specialists:
        await message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    SPECIALISTS_PER_PAGE = 10
    page = 0
    total_pages = (len(specialists) + SPECIALISTS_PER_PAGE - 1) // SPECIALISTS_PER_PAGE

    def get_specialists_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * SPECIALISTS_PER_PAGE
        end_idx = min(start_idx + SPECIALISTS_PER_PAGE, len(specialists))
        response = f"<b>–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for spec in specialists[start_idx:end_idx]:
            username = f"@{spec.username}" if spec.username else f"ID: {spec.user_id}"
            response += f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {spec.full_name} ({username})\n"
            buttons.append(
                [InlineKeyboardButton(text=f"{spec.full_name}", callback_data=f"view_specialist_{spec.user_id}")]
            )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"specialists_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"specialists_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_specialists_page(page)
    await message.answer(response, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.view_specialists)
    await state.update_data(total_pages=total_pages, specialists=specialists)

@router.callback_query(F.data.startswith("specialists_page_"), AdminStates.view_specialists)
async def paginate_specialists(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Paginate through specialists list."""
    page = int(callback.data.split("_")[-1])
    data = await state.get_data()
    specialists = data.get("specialists", [])
    total_pages = data.get("total_pages", 1)
    SPECIALISTS_PER_PAGE = 10

    def get_specialists_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * SPECIALISTS_PER_PAGE
        end_idx = min(start_idx + SPECIALISTS_PER_PAGE, len(specialists))
        response = f"<b>–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for spec in specialists[start_idx:end_idx]:
            username = f"@{spec.username}" if spec.username else f"ID: {spec.user_id}"
            response += f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {spec.full_name} ({username})\n"
            buttons.append(
                [InlineKeyboardButton(text=f"{spec.full_name}", callback_data=f"view_specialist_{spec.user_id}")]
            )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"specialists_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"specialists_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_specialists_page(page)
    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("view_specialist_"), AdminStates.view_specialists)
async def view_specialist_appointments(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Show assigned appointments for a selected specialist."""
    specialist_id = callback.data.split("_")[-1]
    crud = CRUD(session)
    specialist = await crud.get_specialist(specialist_id)
    if not specialist:
        await callback.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
    appointments = await crud.get_appointments_by_specialist(specialist_id)
    appointments = [app for app in appointments if app.status in [AppointmentStatus.APPROVED, AppointmentStatus.PENDING]]
    if not appointments:
        await callback.message.edit_text(
            f"–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist.full_name}.",
            reply_markup=get_admin_inline_keyboard()
        )
        await state.clear()
        return
    APPOINTMENTS_PER_PAGE = 5
    page = 0
    total_pages = (len(appointments) + APPOINTMENTS_PER_PAGE - 1) // APPOINTMENTS_PER_PAGE

    def get_appointments_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * APPOINTMENTS_PER_PAGE
        end_idx = min(start_idx + APPOINTMENTS_PER_PAGE, len(appointments))
        response = f"<b>–ó–∞—è–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist.full_name} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for app in appointments[start_idx:end_idx]:
            scheduled_time = app.scheduled_time.astimezone(config.TIMEZONE).strftime(
                "%d.%m.%Y %H:%M") if app.scheduled_time else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            reason = app.reason[:100] + "..." if len(app.reason) > 100 else app.reason
            response += (
                f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {app.client.full_name}\n"
                f"–í—Ä–µ–º—è: {scheduled_time}\n"
                f"–°—Ç–∞—Ç—É—Å: {app.status.value}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            )
            if app.status == AppointmentStatus.APPROVED:
                buttons.append(
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"reassign_{app.id}")]
                )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"spec_appointments_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"spec_appointments_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º", callback_data="back_to_specialists")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_appointments_page(page)
    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.view_specialist_appointments)
    await state.update_data(specialist_id=specialist_id, total_pages=total_pages, appointments=appointments)

@router.callback_query(F.data.startswith("spec_appointments_page_"), AdminStates.view_specialist_appointments)
async def paginate_specialist_appointments(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Paginate through specialist's appointments."""
    page = int(callback.data.split("_")[-1])
    data = await state.get_data()
    specialist_id = data.get("specialist_id")
    appointments = data.get("appointments", [])
    total_pages = data.get("total_pages", 1)
    APPOINTMENTS_PER_PAGE = 5
    crud = CRUD(session)
    specialist = await crud.get_specialist(specialist_id)
    if not specialist:
        await callback.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return

    def get_appointments_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * APPOINTMENTS_PER_PAGE
        end_idx = min(start_idx + APPOINTMENTS_PER_PAGE, len(appointments))
        response = f"<b>–ó–∞—è–≤–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist.full_name} (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for app in appointments[start_idx:end_idx]:
            scheduled_time = app.scheduled_time.astimezone(config.TIMEZONE).strftime(
                "%d.%m.%Y %H:%M") if app.scheduled_time else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
            reason = app.reason[:100] + "..." if len(app.reason) > 100 else app.reason
            response += (
                f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {app.client.full_name}\n"
                f"–í—Ä–µ–º—è: {scheduled_time}\n"
                f"–°—Ç–∞—Ç—É—Å: {app.status.value}\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            )
            if app.status == AppointmentStatus.APPROVED:
                buttons.append(
                    [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"reassign_{app.id}")]
                )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"spec_appointments_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"spec_appointments_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º", callback_data="back_to_specialists")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_appointments_page(page)
    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_to_specialists", AdminStates.view_specialist_appointments)
async def back_to_specialists(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Return to specialists list."""
    crud = CRUD(session)
    specialists = await crud.get_all_specialists()
    if not specialists:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    SPECIALISTS_PER_PAGE = 10
    page = 0
    total_pages = (len(specialists) + SPECIALISTS_PER_PAGE - 1) // SPECIALISTS_PER_PAGE

    def get_specialists_page(page: int) -> tuple[str, InlineKeyboardMarkup]:
        start_idx = page * SPECIALISTS_PER_PAGE
        end_idx = min(start_idx + SPECIALISTS_PER_PAGE, len(specialists))
        response = f"<b>–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):</b>\n\n"
        buttons = []
        for spec in specialists[start_idx:end_idx]:
            username = f"@{spec.username}" if spec.username else f"ID: {spec.user_id}"
            response += f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {spec.full_name} ({username})\n"
            buttons.append(
                [InlineKeyboardButton(text=f"{spec.full_name}", callback_data=f"view_specialist_{spec.user_id}")]
            )
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"specialists_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"specialists_page_{page + 1}"))
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        return response, InlineKeyboardMarkup(inline_keyboard=buttons)

    response, keyboard = get_specialists_page(page)
    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="HTML")
    await state.set_state(AdminStates.view_specialists)
    await state.update_data(total_pages=total_pages, specialists=specialists)
    await callback.answer()

@router.callback_query(F.data.startswith("reassign_"), AdminStates.view_specialist_appointments)
async def reassign_appointment(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """Initiate reassignment of an appointment to another specialist."""
    appointment_id = int(callback.data.split("_")[1])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    if not appointment.scheduled_time:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.", reply_markup=None)
        await state.clear()
        return
    specialists = await crud.get_available_specialists()
    specialists = [spec for spec in specialists if spec.id != appointment.specialist_id]
    if not specialists:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.", reply_markup=None)
        await state.clear()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{spec.full_name} (@{spec.username})",
                              callback_data=f"reassign_to_{appointment_id}_{spec.user_id}")]
        for spec in specialists
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:", reply_markup=keyboard)
    await state.set_state(AdminStates.reassign_specialist)
    await state.update_data(appointment_id=appointment_id)

@router.callback_query(F.data.startswith("reassign_to_"), AdminStates.reassign_specialist)
async def process_reassign_specialist(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot):
    """Process reassignment to a new specialist and send notifications."""
    _, appointment_id, new_specialist_id = callback.data.split("_")
    appointment_id = int(appointment_id)
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=None)
        await state.clear()
        return
    old_specialist = appointment.specialist
    new_specialist = await crud.get_specialist(new_specialist_id)
    if not new_specialist:
        await callback.message.edit_text("–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=None)
        await state.clear()
        return
    try:
        await bot.send_message(new_specialist.user_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.")
    except TelegramBadRequest as e:
        logger.error(f"Cannot message specialist {new_specialist.user_id}: {e}")
        await callback.message.edit_text(
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {new_specialist.full_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ ID –Ω–µ–≤–µ—Ä–Ω—ã–π).",
            reply_markup=None
        )
        await state.clear()
        return
    appointment.specialist_id = new_specialist.id
    appointment.client_ready = False
    appointment.specialist_ready = False
    await session.commit()
    try:
        await notify_client_reassigned(bot, appointment)
    except Exception as e:
        logger.error(f"Failed to notify client for reassigned appointment {appointment_id}: {e}")
        await bot.send_message(
            config.ADMIN_ID,
            escape_markdown_v2(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{appointment_id}."),
            parse_mode="MarkdownV2"
        )
    try:
        await notify_specialist(bot, appointment, is_reassignment=True)
    except Exception as e:
        logger.error(f"Failed to notify new specialist {new_specialist.user_id} for reassigned appointment {appointment_id}: {e}")
        await bot.send_message(
            config.ADMIN_ID,
            escape_markdown_v2(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {new_specialist.full_name} –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{appointment_id}."),
            parse_mode="MarkdownV2"
        )
        new_specialist.is_available = False
        await session.commit()
    if old_specialist and old_specialist.is_available:
        try:
            text = escape_markdown_v2(
                f"–ó–∞—è–≤–∫–∞ #{appointment.id} –±—ã–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.\n"
                f"–ö–ª–∏–µ–Ω—Ç: {appointment.client.full_name}\n"
                f"–í—Ä–µ–º—è: {appointment.scheduled_time.astimezone(config.TIMEZONE).strftime('%d.%m.%Y %H:%M')}"
            )
            await bot.send_message(
                old_specialist.user_id,
                text,
                parse_mode="MarkdownV2"
            )
        except TelegramBadRequest as e:
            logger.warning(f"Failed to notify old specialist {old_specialist.user_id} for reassigned appointment {appointment_id}: {e}")
    await callback.message.edit_text(
        f"–ó–∞—è–≤–∫–∞ #{appointment.id} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ {new_specialist.full_name}.",
        reply_markup=None
    )
    await state.clear()
