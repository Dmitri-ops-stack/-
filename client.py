from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import User, Client, Role, Appointment, AppointmentStatus, Blacklist
from database.crud import CRUD
from config import config
from keyboards import get_client_keyboard
from utils.states import ClientStates
from utils.helpers import validate_phone, validate_date, format_appointment_date
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

router = Router()

def escape_markdown_v2(text: any) -> str:
    """Escape special characters for Telegram MarkdownV2, handling None or non-string inputs."""
    if text is None:
        return ""
    text = str(text)
    chars_to_escape = r'_*[]()~`#+-=|{}.!'
    for char in chars_to_escape:
        text = text.replace(char, f'\\{char}')
    return text

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    await state.clear()
    logger.info(f"Processing /start for telegram_id={telegram_id}")
    if telegram_id == config.ADMIN_ID:
        user = await crud.get_user(str(telegram_id))
        if user:
            if user.role != Role.ADMIN:
                user.role = Role.ADMIN
                await session.commit()
                logger.info(f"Updated role to ADMIN for telegram_id={telegram_id}")
        else:
            user = User(telegram_id=str(telegram_id), role=Role.ADMIN)
            session.add(user)
            await session.commit()
            logger.info(f"Created admin with telegram_id={telegram_id}")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    user = await crud.get_user(str(telegram_id))
    if user:
        if user.role == Role.CLIENT:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_client_keyboard())
        elif user.role == Role.SPECIALIST:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /specialist –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        elif user.role == Role.ADMIN:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    blacklist_entry = await crud.is_blacklisted(str(telegram_id))
    if blacklist_entry and blacklist_entry.blocked_until > datetime.now(tz=config.TIMEZONE):
        await message.answer(f"üö´ –í—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –¥–æ {blacklist_entry.blocked_until.astimezone(config.TIMEZONE).strftime('%d.%m.%Y %H:%M')}!")
        return
    elif blacklist_entry:
        await session.delete(blacklist_entry)
        await session.commit()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    await state.set_state(ClientStates.await_codeword)

@router.message(ClientStates.await_codeword)
async def process_codeword(message: Message, state: FSMContext, session: AsyncSession):
    if message.text != config.CODE_WORD:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ!")
        return
    telegram_id = message.from_user.id
    crud = CRUD(session)
    user = await crud.get_user(str(telegram_id))
    if user:
        if user.role == Role.CLIENT:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_client_keyboard())
            await state.clear()
            return
        elif user.role == Role.SPECIALIST:
            await message.answer("–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /specialist.")
            await state.clear()
            return
        elif user.role == Role.ADMIN:
            await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin.")
            await state.clear()
            return
    user = User(telegram_id=str(telegram_id), role=Role.CLIENT)
    await crud.create_user(user.telegram_id, user.role)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await state.set_state(ClientStates.registration)

@router.message(ClientStates.registration)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ClientStates.city)

@router.message(ClientStates.city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(city=city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (11 —Ü–∏—Ñ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä, 89991234567):")
    await state.set_state(ClientStates.phone)

@router.message(ClientStates.phone)
async def process_phone(message: Message, state: FSMContext, session: AsyncSession):
    phone = message.text.strip()
    if not validate_phone(phone):
        await message.answer("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 89991234567). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    data = await state.get_data()
    telegram_id = message.from_user.id
    crud = CRUD(session)
    try:
        client = Client(
            user_id=str(telegram_id),
            full_name=data["full_name"],
            city=data["city"],
            phone=phone
        )
        await crud.create_client(client)
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_client_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"Failed to create client {telegram_id}: {e}")
        await session.rollback()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

@router.message(F.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_appointment(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†", callback_data="inspection_type:R")],
        [InlineKeyboardButton(text="–°–¢–†", callback_data="inspection_type:STR")],
        [InlineKeyboardButton(text="–ë", callback_data="inspection_type:B")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(ClientStates.choose_type)

@router.callback_query(F.data.startswith("inspection_type:"))
async def process_inspection_type(callback: CallbackQuery, state: FSMContext):
    inspection_type = callback.data.split(":")[1]
    await state.update_data(inspection_type=inspection_type)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ê–∫—Ç–∏–≤–Ω–æ–µ", callback_data="body_part:active")],
        [InlineKeyboardButton(text="–ü–∞—Å—Å–∏–≤–Ω–æ–µ", callback_data="body_part:passive")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑–¥–µ–ª–∏—è:", reply_markup=keyboard)
    await state.set_state(ClientStates.choose_part)

@router.callback_query(F.data.startswith("body_part:"))
async def process_body_part(callback: CallbackQuery, state: FSMContext):
    body_part = callback.data.split(":")[1]
    await state.update_data(body_part=body_part)
    if body_part == "active":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–æ–ú", callback_data="complex:–≠–∫–æ-–ú")],
            [InlineKeyboardButton(text="–ú–æ–¥(01,02,07)", callback_data="complex:–ú–æ–¥—É–ª—å")],
            [InlineKeyboardButton(text="–†–ö01", callback_data="complex:–†–ö-01")],
            [InlineKeyboardButton(text="–≠–∫–æ–ù", callback_data="complex:–≠–∫–æ–ù")]
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å:", reply_markup=keyboard)
        await state.set_state(ClientStates.choose_complex)
    else:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=None)
        await state.set_state(ClientStates.enter_date)

@router.callback_query(F.data.startswith("complex:"))
async def process_complex(callback: CallbackQuery, state: FSMContext):
    complex = callback.data.split(":")[1]
    await state.update_data(complex=complex)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=None)
    await state.set_state(ClientStates.enter_date)

@router.message(ClientStates.enter_date)
async def process_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        if not validate_date(date_str):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º/–≤—ã—Ö–æ–¥–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.04.2025):")
            return
        proposed_date = datetime.strptime(date_str, "%d.%m.%Y").replace(tzinfo=config.TIMEZONE)
        await state.update_data(proposed_date=proposed_date)
        await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
        await state.set_state(ClientStates.collecting_reason)
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.04.2025), —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏ (–ø–Ω-–ø—Ç):")
        return

@router.message(ClientStates.collecting_reason)
async def process_collecting_reason(message: Message, state: FSMContext, session: AsyncSession, bot):
    data = await state.get_data()
    telegram_id = message.from_user.id
    crud = CRUD(session)
    client = await crud.get_client(str(telegram_id))
    if not client:
        await message.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    if "proposed_date" not in data:
        logger.warning(f"proposed_date missing for client {telegram_id}. Prompting for date.")
        await message.answer("–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(ClientStates.enter_date)
        return
    description = (
        f"–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: {data.get('inspection_type', '-')}\n"
        f"–ß–∞—Å—Ç—å: {data.get('body_part', '-')}\n"
        f"–ö–æ–º–ø–ª–µ–∫—Å: {data.get('complex', '-')}\n"
        f"–î–∞—Ç–∞: {data['proposed_date'].strftime('%d.%m.%Y')}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}"
    )
    try:
        appointment = Appointment(
            client_id=client.id,
            proposed_date=data["proposed_date"],
            complex=data.get("complex", "-"),
            reason=description,
            status=AppointmentStatus.PENDING
        )
        await crud.create_appointment(appointment)
        avg_rating = (client.rating / client.rating_count) if client.rating_count > 0 else 0
        admin_message = escape_markdown_v2(
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appointment.id} –æ—Ç {client.full_name} (—Å—Ä. —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}):\n{description}"
        )
        await bot.send_message(
            config.ADMIN_ID,
            admin_message,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{appointment.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{appointment.id}")]
            ])
        )
        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=get_client_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"Failed to create appointment for client {telegram_id}: {e}")
        await session.rollback()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏")
async def my_appointments(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    client = await crud.get_client(str(telegram_id))
    if not client:
        await message.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return
    appointments = await crud.get_appointments_by_client(client.id)
    if not appointments:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    response = "<b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for app in appointments:
        status = app.status.value
        date = format_appointment_date(app.proposed_date)
        scheduled_time = app.scheduled_time.astimezone(config.TIMEZONE).strftime("%H:%M") if app.scheduled_time else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        specialist = app.specialist.full_name if app.specialist else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        response += (
            f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {scheduled_time}\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {app.reason}\n\n"
        )
    await message.answer(response, reply_markup=get_client_keyboard())

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É")
async def cancel_appointment(message: Message, state: FSMContext, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    client = await crud.get_client(str(telegram_id))
    if not client:
        await message.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    appointments = await crud.get_appointments_by_client(client.id)
    active_appointments = [app for app in appointments if app.status in [AppointmentStatus.PENDING, AppointmentStatus.APPROVED]]
    if not active_appointments:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=get_client_keyboard())
        await state.clear()
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ó–∞—è–≤–∫–∞ #{app.id} ({format_appointment_date(app.proposed_date)})", callback_data=f"cancel_app_{app.id}")]
        for app in active_appointments
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
    await state.set_state(ClientStates.cancel_appointment)

@router.callback_query(F.data.startswith("cancel_app_"), ClientStates.cancel_appointment)
async def process_cancel_appointment(callback: CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split("_")[2])
    await state.update_data(appointment_id=appointment_id)
    await callback.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:")
    await state.set_state(ClientStates.cancel_reason)

@router.message(ClientStates.cancel_reason)
async def process_cancel_reason(message: Message, state: FSMContext, session: AsyncSession, bot):
    reason = message.text.strip()
    data = await state.get_data()
    appointment_id = data.get("appointment_id")
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_client_keyboard())
        await state.clear()
        return
    appointment.status = AppointmentStatus.CANCELED
    appointment.reason = f"–û—Ç–º–µ–Ω–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º: {reason}\n{appointment.reason}"
    await session.commit()
    admin_message = escape_markdown_v2(
        f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
    )
    await bot.send_message(config.ADMIN_ID, admin_message, parse_mode="MarkdownV2")
    if appointment.specialist:
        specialist_message = escape_markdown_v2(
            f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.send_message(appointment.specialist.user_id, specialist_message, parse_mode="MarkdownV2")
    await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_client_keyboard())
    await state.clear()

async def notify_client_appointment_approved(appointment: Appointment, bot):
    """
    Notify the client that their appointment is approved, including specialist's phone number (if available) and a username-based Telegram link.
    """
    scheduled_time = format_appointment_date(appointment.scheduled_time)
    username = appointment.specialist.username
    phone = getattr(appointment.specialist, 'phone', None)
    phone_display = escape_markdown_v2(f"–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {phone}") if phone and phone.strip() else "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω"
    if username and username.strip():
        if not username.startswith('@'):
            username = f"@{username}"
        specialist_link = f"https://t.me/{username}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º]({specialist_link})"
    else:
        specialist_link = f"https://t.me/{config.ADMIN_ID}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º]({specialist_link})"
        logger.warning(f"Specialist {appointment.specialist.full_name} (ID: {appointment.specialist.user_id}, appointment_id: {appointment.id}) has no valid username. Using admin link.")
    message_lines = [
        escape_markdown_v2(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{appointment.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"),
        escape_markdown_v2(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {scheduled_time}"),
        escape_markdown_v2(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointment.specialist.full_name}"),
        phone_display,
        specialist_contact
    ]
    if not username or not username.strip():
        message_lines.append(f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/{config.ADMIN_ID})")
    try:
        await bot.send_message(
            appointment.client.user.telegram_id,
            "\n".join(message_lines),
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"client_approve_{appointment.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"client_decline_{appointment.id}")]
            ])
        )
        logger.info(f"Notified client {appointment.client.user.telegram_id} about approved appointment {appointment.id}")
    except Exception as e:
        logger.error(f"Failed to notify client {appointment.client.user.telegram_id} for appointment {appointment.id}: {e}")
        admin_message = escape_markdown_v2(
            f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {appointment.client.full_name} –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{appointment.id}."
        )
        await bot.send_message(config.ADMIN_ID, admin_message, parse_mode="MarkdownV2")

@router.callback_query(F.data.startswith("client_approve_"))
async def client_approve_appointment(callback: CallbackQuery, session: AsyncSession):
    """
    Handle client's approval of an appointment, retaining specialist details.
    """
    appointment_id = int(callback.data.split("_")[2])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    appointment.client_ready = True  # Set client_ready instead of status
    await session.commit()
    scheduled_time = format_appointment_date(appointment.scheduled_time)
    username = appointment.specialist.username
    phone = getattr(appointment.specialist, 'phone', None)
    phone_display = escape_markdown_v2(f"–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {phone}") if phone and phone.strip() else "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω"
    if username and username.strip():
        if not username.startswith('@'):
            username = f"@{username}"
        specialist_link = f"https://t.me/{username}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º]({specialist_link})"
    else:
        specialist_link = f"https://t.me/{config.ADMIN_ID}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º]({specialist_link})"
        logger.warning(f"Specialist {appointment.specialist.full_name} (ID: {appointment.specialist.user_id}, appointment_id: {appointment_id}) has no valid username. Using admin link.")
    message_lines = [
        escape_markdown_v2(f"–ó–∞—è–≤–∫–∞ #{appointment.id} –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –≤—Å—Ç—Ä–µ—á–∏."),
        escape_markdown_v2(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {scheduled_time}"),
        escape_markdown_v2(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointment.specialist.full_name}"),
        phone_display,
        specialist_contact
    ]
    if not username or not username.strip():
        message_lines.append(f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/{config.ADMIN_ID})")
    try:
        await callback.message.edit_text(
            "\n".join(message_lines),
            parse_mode="MarkdownV2"
        )
        logger.info(f"Client {appointment.client.user.telegram_id} approved appointment {appointment_id}")
    except Exception as e:
        logger.error(f"Failed to update approval message for client {appointment.client.user.telegram_id}, appointment {appointment_id}: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")

@router.callback_query(F.data.startswith("client_decline_"))
async def client_decline_appointment(callback: CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split("_")[2])
    await state.update_data(appointment_id=appointment_id, action="decline")
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(ClientStates.reject_reason)

@router.callback_query(F.data.startswith("client_refuse_"))
async def client_refuse_appointment(callback: CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split("_")[2])
    await state.update_data(appointment_id=appointment_id, action="refuse")
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(ClientStates.reject_reason)

@router.message(ClientStates.reject_reason)
async def process_reject_reason(message: Message, state: FSMContext, session: AsyncSession, bot):
    data = await state.get_data()
    appointment_id = data["appointment_id"]
    action = data.get("action")
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment:
        await message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_client_keyboard())
        await state.clear()
        return
    reason = escape_markdown_v2(message.text)
    if action == "decline":
        appointment.status = AppointmentStatus.PENDING  # Revert to PENDING for admin review
        appointment.reject_reason = reason
        await session.commit()
        admin_message = escape_markdown_v2(
            f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.send_message(
            config.ADMIN_ID,
            admin_message,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{appointment.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{appointment.id}")]
            ])
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(ClientStates.enter_date)
    elif action == "refuse":
        appointment.status = AppointmentStatus.CANCELED
        appointment.reject_reason = reason
        await session.commit()
        admin_message = escape_markdown_v2(
            f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.send_message(config.ADMIN_ID, admin_message, parse_mode="MarkdownV2")
        if appointment.specialist:
            specialist_message = escape_markdown_v2(
                f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            await bot.send_message(appointment.specialist.user_id, specialist_message, parse_mode="MarkdownV2")
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_client_keyboard())
        await state.clear()

@router.callback_query(F.data.startswith("client_ready_"))
async def client_ready_to_work(callback: CallbackQuery, session: AsyncSession, bot):
    """
    Handle client's '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' confirmation, notify specialist without button, and update client's message.
    """
    appointment_id = int(callback.data.split("_")[2])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment or appointment.status != AppointmentStatus.APPROVED or appointment.client_ready:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.")
        await callback.answer()
        return
    appointment.client_ready = True
    await session.commit()
    scheduled_time = format_appointment_date(appointment.scheduled_time)
    username = appointment.specialist.username
    phone = getattr(appointment.specialist, 'phone', None)
    phone_display = escape_markdown_v2(f"–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {phone}") if phone and phone.strip() else "–¢–µ–ª–µ—Ñ–æ–Ω —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: –Ω–µ —É–∫–∞–∑–∞–Ω"
    if username and username.strip():
        if not username.startswith('@'):
            username = f"@{username}"
        specialist_link = f"https://t.me/{username}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º]({specialist_link})"
    else:
        specialist_link = f"https://t.me/{config.ADMIN_ID}"
        specialist_contact = f"[–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º]({specialist_link})"
        logger.warning(f"Specialist {appointment.specialist.full_name} (ID: {appointment.specialist.user_id}, appointment_id: {appointment_id}) has no valid username. Using admin link.")
    client_message_lines = [
        escape_markdown_v2(f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ –∑–∞—è–≤–∫–µ #{appointment.id}. –û–∂–∏–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."),
        escape_markdown_v2(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {scheduled_time}"),
        escape_markdown_v2(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointment.specialist.full_name}"),
        phone_display,
        specialist_contact
    ]
    if not username or not username.strip():
        client_message_lines.append(f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/{config.ADMIN_ID})")
    specialist_message = escape_markdown_v2(
        f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –ø–æ –∑–∞—è–≤–∫–µ #{appointment.id} (–≤—Ä–µ–º—è: {scheduled_time})."
    )
    try:
        await bot.send_message(
            appointment.specialist.user_id,
            specialist_message,
            parse_mode="MarkdownV2"
        )
        await callback.message.edit_text(
            "\n".join(client_message_lines),
            parse_mode="MarkdownV2"
        )
        logger.info(f"Client {appointment.client.user.telegram_id} confirmed readiness for appointment {appointment_id}")
        await callback.answer()
    except Exception as e:
        logger.error(f"Failed to notify specialist for appointment {appointment_id}: {e}")
        await session.rollback()
        await callback.message.edit_text(
            "\n".join(client_message_lines + ["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –Ω–æ –≤–∞—à–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."]),
            parse_mode="MarkdownV2"
        )
        await callback.answer()

@router.message(F.text == "üìà –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
async def show_rating(message: Message, session: AsyncSession):
    telegram_id = message.from_user.id
    crud = CRUD(session)
    client = await crud.get_client(str(telegram_id))
    if not client:
        await message.answer("–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.")
        return
    avg_rating = (client.rating / client.rating_count) if client.rating_count > 0 else 0
    response = (
        f"<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {client.rating_count}"
    )
    await message.answer(response, reply_markup=get_client_keyboard())
    logger.info(f"Client {telegram_id} viewed rating")