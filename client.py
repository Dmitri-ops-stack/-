from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

    logger.info(f"Processing /start for telegram_id={telegram_id}")
    if telegram_id == config.ADMIN_ID:
        user = await crud.get_user(str(telegram_id))
        if user:
            if user.role != Role.ADMIN:
                user.role = Role.ADMIN
                await session.commit()
                logger.info(f"Updated role to ADMIN for telegram_id={telegram_id}")
        else:
            user = User(telegram_id=str(telegram_id), role=Role.ADMIN)
            session.add(user)
            await session.commit()
            logger.info(f"Created admin with telegram_id={telegram_id}")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return
    user = await crud.get_user(str(telegram_id))
    if user:
        if user.role == Role.CLIENT:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_client_keyboard())
        elif user.role == Role.SPECIALIST:
            await y_markup=get_client_keyboard())
            await state.clear()
            return
        elif user.role == Role.SPECIALIST:
            await message.answer("–í—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /specialist.")
            await state.clear()
            return
        elif user.role == Role.ADMIN:
            await message.answer("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin.")
            await state.clear()
            return
    user = User(telegram_id=str(telegram_id), role=Role.CLIENT)
    await crud.create_user(user.telegram_id, user.role)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
    await state.set_state(ClientStates.registration)

@router.message(ClientStates.registration)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(ClientStates.city)

@router.message(ClientStates.city)
async def process
        await state.clear()
    except Exception as e:
        logger.error(f"Failed to create client {telegram_id}: {e}")
        await session.rollback()
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

@router.message(F.text == "üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞")
async def new_appointment(message: Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†", callback_data="inspection_type:R")],
        [InlineKeyboardButton(text="–°–¢–†", callback_data="inspection_type:STR")],
        [InlineKeyboardButton(text="–ë", callback_data="inspection_type:B")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=keyboard)
    await state.set_state(ClientStates.choose_type)

@router.callback_quer

@router.callback_query(F.data.startswith("complex:"))
async def process_complex(callback: CallbackQuery, state: FSMContext):
    complex = callback.data.split(":")[1]
    await state.update_data(complex=complex)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=None)
    await state.set_state(ClientStates.enter_date)

@router.message(ClientStates.enter_date)
async def process_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        if not validate_date(date_str):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º/–≤—ã—Ö–æ–¥–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20.04.2025):")
            return
        proposed_date = datetime.strptime(date_str, "%d.%m.%Y").replace(tzinfo=config.TIMEZONE)
        await state.update_data(proposed_date=proposed_date)
       
        f"–ß–∞—Å—Ç—å: {data.get('body_part', '-')}\n"
        f"–ö–æ–º–ø–ª–µ–∫—Å: {data.get('complex', '-')}\n"
        f"–î–∞—Ç–∞: {data['proposed_date'].strftime('%d.%m.%Y')}\n"
        f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}"
    )
    try:
        appointment = Appointment(
            client_id=client.id,
            proposed_date=data["proposed_date"],
            complex=data.get("complex", "-"),
            reason=description,
            status=AppointmentStatus.PENDING
        )
        await crud.create_appointment(appointment)
        avg_rating = (client.rating / client.rating_count) if client.rating_count > 0 else 0
        admin_message = escape_markdown_v2(
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{appointment.id} –æ—Ç {client.full_name} (—Å—Ä. —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}):\n{description}"
        )
    appointments = await crud.get_appointments_by_client(client.id)
    if not appointments:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    response = "<b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏:</b>\n\n"
    for app in appointments:
        status = app.status.value
        date = format_appointment_date(app.proposed_date)
        scheduled_time = app.scheduled_time.astimezone(config.TIMEZONE).strftime("%H:%M") if app.scheduled_time else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ"
        specialist = app.specialist.full_name if app.specialist else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        response += (
            f"–ó–∞—è–≤–∫–∞ #{app.id}\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {scheduled_time}\n"
            f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist}\n"
            f"–°—Ç
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=keyboard)
    await state.set_state(ClientStates.cancel_appointment)

@router.callback_query(
    if appointment.specialist:
        specialist_message = escape_markdown_v2(
            f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        logger.warning(f"Specialist {appointment.specialist.full_name} (ID: {appointment.specialist.user_id}, appointment_id: {appointment.id}) has no valid username. Using admin link.")
    message_lines = [
        escape_markdown_v2(f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{appointment.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"),
        escape_markdown_v2(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {scheduled_time}"),
        escape_markdown_v2(f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {appointment.specialist.full_name}"),
        phone_display,
        specialist_contact
    ]
    if not username or not username.strip():
        message_lines.append(f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/{config.ADMIN_ID})")
    try:
        await bot.send_message(
            ap
        return
    appointment.client_ready = True  # Set client_ready instead of status
    await session.commit()
    scheduled_time = format_appointment_date(appointment.scheduled_time)
    username = appointment.specialist.username
    phone = getattr(appoent {appointment_id}: {e}")
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")

@router.callback_query(F.data.startswith("client_decline_"))
async def client_decline_appointment(callback: CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split("_")[2])
    await state.update_data(appointment_id=appointment_id, action="decline")
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(ClientStates.reject_reason)

@router.callback_query(F.data.startswith("client_refuse_"))
async def client_refuse_appointment(callback: CallbackQuery, state: FSMContext):
    appointment_id = int(callback.data.split("_")[2])
    await state.update_data(appointment_id=appointment_id, action="refuse")
    await callback.message.edit_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
    await state.set_state(ClientStates.reject_reason)

            ])
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(ClientStates.enter_date)
    elif action == "refuse":
        appointment.status = AppointmentStatus.CANCELED
        appointment.reject_reason = reason
        await session.commit()
        admin_message = escape_markdown_v2(
            f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
        await bot.send_message(config.ADMIN_ID, admin_message, parse_mode="MarkdownV2")
        if appointment.specialist:
            specialist_message = escape_markdown_v2(
                f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞—è–≤–∫–∏ #{appointment.id}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
            await bot.send_message(appointment.specialist.user_id, specialist_message, parse_mode="MarkdownV2")
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_client_keyboard())
        await state.clear()

@router.callback_query(F.data.startswith("client_ready_"))
async def client_ready_to_work(callback: CallbackQuery, session: AsyncSession, bot):
    """
    Handle client's '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' confirmation, notify specialist without button, and update client's message.
    """
    appointment_id = int(callback.data.split("_")[2])
    crud = CRUD(session)
    appointment = await crud.get_appointment(appointment_id)
    if not appointment or appointment.status != AppointmentStatus.APPROVED or appointment.client_ready:
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.")
        await callback
        specialist_contact
    ]
    if not username or not username.strip():
        client_message_lines.append(f"–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/{config.ADMIN_ID})")
    specialist_message = escape_markdown_v2(
        f"–ö–ª–∏–µ–Ω—Ç {appointment.client.full_name} –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –ø–æ –∑–∞—è–≤–∫–µ #{appointment.id} (–≤—Ä–µ–º—è: {scheduled_time})."
    )
    try:
        await bot.send_message(
            appointment.specialist.user_id,
            specialist_message,
            parse_mode="MarkdownV2"
        )
        await callback.message.edit_text(
            
    response = (
        f"<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥</b>\n\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: {client.rating_count}"
    )
    await message.answer(response, reply_markup=get_client_keyboard())
    logger.info(f"Client {telegram_id} viewed rating")
